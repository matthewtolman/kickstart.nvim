local ls = require 'luasnip'
require('luasnip.loaders.from_vscode').lazy_load()
ls.config.setup {}

local s = ls.snippet
local sn = ls.snippet_node
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node
local c = ls.choice_node
local d = ls.dynamic_node
local r = ls.restore_node
local l = require('luasnip.extras').lambda
local rep = require('luasnip.extras').rep
local p = require('luasnip.extras').partial
local m = require('luasnip.extras').match
local n = require('luasnip.extras').nonempty
local dl = require('luasnip.extras').dynamic_lambda
local fmt = require('luasnip.extras.fmt').fmt
local fmta = require('luasnip.extras.fmt').fmta
local types = require 'luasnip.util.types'
local conds = require 'luasnip.extras.conditions'
local conds_expand = require 'luasnip.extras.conditions.expand'

-- args is a table, where 1 is the text in Placeholder 1, 2 the text in
-- placeholder 2,...
local function copy(args)
  return args[1]
end

local function file_name()
  local path = vim.fn.expand '%'
  local file_name = ''
  for part in path:gmatch '([^/\\]+)' do
    file_name = part
  end

  return file_name:gsub('%..*', '')
end

ls.add_snippets('elixir', {
  s('defl', {
    t { '@doc """', '\t' },
    i(5, 'Description'),
    t { '', '\t', '\t## Examples', '\t', '\t\tiex> ' },
    f(copy, 1),
    t '(',
    i(6, ''),
    t ')',
    t { '', '\t\t' },
    i(7, ':ok'),
    t { '', '\t', '"""', '@spec ' },
    f(copy, 1),
    t '(',
    i(3, ''),
    t ') :: ',
    i(4, 'any()'),
    t { '', 'def ' },
    i(1, 'func_name'),
    t '(',
    i(2, ''),
    t '), do: ',
    i(0, ':ok'),
  }),

  s('del', {
    t 'def ',
    i(1, 'func_name'),
    t '(',
    i(2, ''),
    t '), do: ',
    i(0, ':ok'),
  }),

  s('de', {
    t 'def ',
    i(1, 'func_name'),
    t '(',
    i(2, ''),
    t { ') do ', '\t' },
    i(0, ':ok'),
    t { '', 'end' },
  }),

  s({ trig = 'def', priority = 99999999 }, {
    t { '@doc """', '\t' },
    i(5, 'Description'),
    t { '', '\t', '\t## Examples', '\t', '\t\tiex> ' },
    f(copy, 1),
    t '(',
    i(6, ''),
    t ')',
    t { '', '\t\t' },
    i(7, ':ok'),
    t { '', '\t', '"""', '@spec ' },
    f(copy, 1),
    t '(',
    i(3, ''),
    t ') :: ',
    i(4, 'any()'),
    t { '', 'def ' },
    i(1, 'func_name'),
    t '(',
    i(2, ''),
    t { ') do', '\t' },
    i(0, ':ok'),
    t { '', 'end' },
  }),

  s({ trig = 'defg', priority = 99999999 }, {
    t { '@doc """', '\t' },
    i(6, 'Description'),
    t { '', '\t', '\t## Examples', '\t', '\t\tiex> ' },
    f(copy, 1),
    t '(',
    i(7, ''),
    t ')',
    t { '', '\t\t' },
    i(8, ':ok'),
    t { '', '\t', '"""', '@spec ' },
    f(copy, 1),
    t '(',
    i(4, ''),
    t ') :: ',
    i(5, 'any()'),
    t { '', 'def ' },
    i(1, 'func_name'),
    t '(',
    i(2, ''),
    t { ')', '\twhen ' },
    i(3, 'true'),
    t { '', 'do', '\t' },
    i(0, ':ok'),
    t { '', 'end' },
  }),

  s({ trig = 'defp', priority = 99999999 }, {
    t { '@doc """', '\t' },
    i(5, 'Description'),
    t { '', '\t', '\t## Examples', '\t', '\t\tiex> ' },
    f(copy, 1),
    t '(',
    i(6, ''),
    t ')',
    t { '', '\t\t' },
    i(7, ':ok'),
    t { '', '\t', '"""', '@spec ' },
    f(copy, 1),
    t '(',
    i(3, ''),
    t ') :: ',
    i(4, 'any()'),
    t { '', 'defp ' },
    i(1, 'func_name'),
    t '(',
    i(2, ''),
    t { ') do', '\t' },
    i(0, ':ok'),
    t { '', 'end' },
  }),

  s('type', {
    t '@type ',
    i(1, 'type_name'),
    t ' :: ',
    i(2, 'type'),
    t '()',
  }),

  s('defkwargs', {
    t { '@doc """', '\t' },
    i(6, 'Description'),
    t { '', '\t', '\t## Examples', '\t', '\t\tiex> ' },
    f(copy, 1),
    t '(',
    i(7, 'arg1: :val1'),
    t ')',
    t { '', '\t\t' },
    i(8, ':ok'),
    t { '', '\t', '"""', '@spec ' },
    f(copy, 1),
    t '(',
    i(4, '[arg1: any()]'),
    t ') :: ',
    i(5, 'any()'),
    t { '', 'def ' },
    i(1, 'func_name'),
    t '(',
    i(2, 'args'),
    t ' \\\\ [',
    i(3, ''),
    t ']',
    t { ') do', '\t' },
    i(0, ':ok'),
    t { '', 'end' },
  }),

  s('defu', {
    t 'defmacro __using__(',
    i(1, 'opts'),
    t { ') do', '\t' },
    i(2, 'arg1'),
    t ' = Keyword.get(',
    f(copy, 1),
    t ', :',
    f(copy, 2),
    t ')',
    t { '', '\t' },
    i(3),
    t { '', '\tquote do', '\t\t' },
    i(0, ':ok'),
    t { '', '\tend', 'end' },
  }),
})

ls.add_snippets('erlang', {
  s('specf', {
    t '-spec ',
    i(1, 'fn_name'),
    t '(',
    i(2, 'any()'),
    t ') -> ',
    i(3, 'any()'),
    t '.',
  }),

  s('docmod', {
    t { '%% ----------------------------------', '%%', '%% @author ' },
    i(1, 'Author'),
    t { '', '%% @copyright ' },
    i(2, 'Year'),
    t ' ',
    i(3, 'Holder'),
    t { '', '%% @doc ' },
    i(4, 'Description'),
    t { '.', '%% @end', '%% @version ' },
    i(5, 'Version'),
    t { '', '%% @end', '%%', '%% ----------------------------------' },
  }),

  s('docfun', {
    t { '%% ----------------------------------', '%%', '%% @doc ' },
    i(1, 'Description'),
    t { '.', '%% @end', '%%', '%% ----------------------------------' },
  }),

  s('docparam', {
    t { '@param ' },
    i(1, 'Name'),
    t ' ',
    i(0, 'Description'),
    t '.',
  }),

  s('docthrow', {
    t { '@throws ' },
    i(0, 'term'),
    t '.',
  }),

  s('docdep', {
    t { '@deprecated Please use {@link ' },
    i(0, 'replacement'),
    t '}',
    t '.',
  }),

  s('docsee', {
    t { '@see ' },
    i(0, 'func_or_module'),
    t '.',
  }),

  s('docequiv', {
    t { '%% @equiv ' },
    i(0, 'expression'),
  }),

  s('docpriv', {
    t { '@private' },
  }),

  s('dochide', {
    t { '@hidden' },
  }),

  s('docsince', {
    t { '@since ' },
    i(0, 'Version'),
    t '',
  }),

  s('docline', {
    t { '%% @doc ' },
    i(0, 'Description'),
  }),

  s('fun', {
    t { '%% ----------------------------------', '%%', '%% @doc ' },
    i(2, 'Description'),
    t { '.', '%% @end', '%%', '%% ----------------------------------' },
    t '-spec ',
    i(1, 'fn_name'),
    t '(',
    i(3, 'any()'),
    t ') -> ',
    i(4, 'any()'),
    t { '.', '' },
    f(copy, 1),
    t '(',
    i(5, 'Arg'),
    t { ') -> ', '\t' },
    i(0, 'nil'),
    t '.',
  }),

  s('handle_call', {
    t 'handle_call(',
    i(1, 'Msg'),
    t ', ',
    i(2, '_From'),
    t ', ',
    i(3, 'State'),
    t ') ->',
    i(4, ''),
    t { '', '\t' },
    t '{reply, ',
    i(5, 'Response'),
    t ', ',
    f(copy, 3),
    t '};',
  }),

  s('handle_call_unknown', {
    t { 'handle_call(_Msg, _From, State) ->', '\t{reply, {error, bad_msg}, State}.' },
  }),

  s('gen_server', {
    t { '%% ----------------------------------', '%%', '%% @author ' },
    i(1, 'Author'),
    t { '', '%% @copyright ' },
    i(2, 'Year'),
    t ', ',
    i(3, 'Apache 2.0 License'),
    t { '', '%% @doc ' },
    i(4, 'Description'),
    t { '.', '%% @end', '%% @version ' },
    i(5, 'Version'),
    t { '', '%% @end', '%%', '%% ----------------------------------', '' },
    t '-module(',
    f(file_name),
    t {
      ').',
      '-vsn("',
    },
    f(copy, 5),
    t {
      '").',
      '',
      '-export([start_link/1, start_link/0]).',
      '-export([init/1, terminate/2, handle_call/3,',
      '\thandle_cast/2, handle_info/2,',
      '\thandle_continue/2, code_change/3]).',
      '',
      '-behavior(gen_server).',
      '',
      '-record(state, {field}).',
      '',
      'start_link() -> start_link([]).',
      '',
      'start_link(Args) ->',
      'gen_server:start_link(?MODULE, {local, ?MODULE}, ?MODULE, Args, []).',
      '',
      '%% Client Methods',
      '',
      'client_methods() -> gen_server:call(?MODULE).',
      '',
      '%% Gen Server Init',
      '',
      'init(Args) ->',
      '\t{ok, #state{}}.',
    },
    i(0, ''),
    t {
      '',
      '',
      'handle_call(_Msg, _From, State=#state{}) ->',
      '\t{reply, {error, bad_msg}, State};',
      'handle_call(_Msg, _From, State) ->',
      '\t{stop, bad_state, {error, bad_msg}, State}.',
      '',
      'handle_cast(_Msg, State=#state{}) ->',
      '\t{noreply, State}.',
      '',
      'handle_continue(_Msg, State) ->',
      '\t{noreply, State}.',
      '',
      'handle_info(_Msg, State) ->',
      '\t{noreply, State}.',
      '',
      'terminate(_Reason, _State) ->',
      '\tok.',
      '',
      'code_change(_OldVsn, State, _Extra) ->',
      '\t{ok, State}.',
      '',
      '%% Implementation',
      '',
      'implementation_methods() -> ok.',
      '',
      '-ifdef(EUNIT).',
      '',
      '-include_lib("eunit/include/eunit.hrl").',
      '',
      'sample_test() ->',
      '\t?assertEqual(true, true).',
      '',
      '-endif.',
    },
  }),

  s('cowboy_handler', {
    t { '%% ----------------------------------', '%%', '%% @author ' },
    i(1, 'Author'),
    t { '', '%% @copyright ' },
    i(2, 'Year'),
    t ' ',
    i(3, 'Apache 2.0 License'),
    t { '', '%% @doc ' },
    i(4, 'Description'),
    t { '.', '%% @end', '%% @version ' },
    i(5, 'Version'),
    t { '', '%% @end', '%%', '%% ----------------------------------' },
    t '-module(',
    f(file_name),
    t {
      ').',
      '-version("',
    },
    f(copy, 5),
    t {
      '")',
      '',
      '-export([init/2, terminate/3]).',
      '',
      'init(Req, State) ->',
      '\t{ok, Req, State}.',
      '',
      'terminate(Reason, Req, State) ->',
      '\tok.',
      '',
      '%% Implementation',
      '',
      'implementation_methods() -> ok.',
      '',
      '-ifdef(EUNIT).',
      '',
      '-include_lib("eunit/include/eunit.hrl").',
      '',
      'sample_test() ->',
      '\t?assertEqual(true, true).',
      '',
      '-endif.',
    },
  }),

  s('cowboy_loop_handler', {
    t { '%% ----------------------------------', '%%', '%% @author ' },
    i(1, 'Author'),
    t { '', '%% @copyright ' },
    i(2, 'Year'),
    t ' ',
    i(3, 'Apache 2.0 License'),
    t { '', '%% @doc ' },
    i(4, 'Description'),
    t { '.', '%% @end', '%% @version ' },
    i(5, 'Version'),
    t { '', '%% @end', '%%', '%% ----------------------------------' },
    t '-module(',
    f(file_name),
    t {
      ').',
      '-version("',
    },
    f(copy, 5),
    t {
      '")',
      '',
      '-export([init/2, terminate/3, info/3]).',
      '',
      'init(Req, State) ->',
      '\t% {cowboy_loop, Req, State, hibernate}.',
      '\t{cowboy_loop, Req, State}.',
      '',
      'terminate(Reason, Req, State) ->',
      '\tok.',
      '',
      'info({reply, Body}, Req, State) ->',
      '\tcowboy_req:reply(200, #{}, Body, Req),',
      '\t{stop, Req, State};',
      'info(_Msg, Req, State) ->',
      '\t{ok, Req, State, hibernate}.',
      '',
      '%% Implementation',
      '',
      'implementation_methods() -> ok.',
      '',
      '-ifdef(EUNIT).',
      '',
      '-include_lib("eunit/include/eunit.hrl").',
      '',
      'sample_test() ->',
      '\t?assertEqual(true, true).',
      '',
      '-endif.',
    },
  }),

  s('cowboy_streaming_handler', {
    t { '%% ----------------------------------', '%%', '%% @author ' },
    i(1, 'Author'),
    t { '', '%% @copyright ' },
    i(2, 'Year'),
    t ' ',
    i(3, 'Apache 2.0 License'),
    t { '', '%% @doc ' },
    i(4, 'Description'),
    t { '.', '%% @end', '%% @version ' },
    i(5, 'Version'),
    t { '', '%% @end', '%%', '%% ----------------------------------' },
    t '-module(',
    f(file_name),
    t {
      ').',
      '-version("',
    },
    f(copy, 5),
    t {
      '")',
      '',
      '-export([init/2, terminate/3, info/3]).',
      '',
      'init(Req, State) ->',
      '\tReq2 = cowboy_req:stream_reply(200, Req),',
      '\t{cowboy_loop, Req2, State}.',
      '',
      'terminate(Reason, Req, State) ->',
      '\tok.',
      '',
      'info(eof, Req, State) ->',
      '\t{stop, Req, State};',
      'info({event, Data}, Req, State) ->',
      '\tcowboy_req:stream_body(Data, nofin, Req),',
      '\t{ok, Req, State};',
      'info(_Msg, Req, State) ->',
      '\t{ok, Req, State, hibernate}.',
      '',
      '%% Implementation',
      '',
      'implementation_methods() -> ok.',
      '',
      '-ifdef(EUNIT).',
      '',
      '-include_lib("eunit/include/eunit.hrl").',
      '',
      'sample_test() ->',
      '\t?assertEqual(true, true).',
      '',
      '-endif.',
    },
  }),

  s('cowboy_middleware', {
    t { '%% ----------------------------------', '%%', '%% @author ' },
    i(1, 'Author'),
    t { '', '%% @copyright ' },
    i(2, 'Year'),
    t ' ',
    i(3, 'Apache 2.0 License'),
    t { '', '%% @doc ' },
    i(4, 'Description'),
    t { '.', '%% @end', '%% @version ' },
    i(5, 'Version'),
    t { '', '%% @end', '%%', '%% ----------------------------------' },
    t '-module(',
    f(file_name),
    t {
      ').',
      '-version("',
    },
    f(copy, 5),
    t {
      '")',
      '',
      '-behavior(cowboy_middleware).',
      '',
      '-export([execute/2]).',
      '',
      'execute(Req, Env) ->',
      '\t{ok, Req, Env}.',
      '',
      '-ifdef(EUNIT).',
      '',
      '-include_lib("eunit/include/eunit.hrl").',
      '',
      'sample_test() ->',
      '\t?assertEqual(true, true).',
      '',
      '-endif.',
    },
  }),

  s('cowboy_websocket_handler', {
    t { '%% ----------------------------------', '%%', '%% @author ' },
    i(1, 'Author'),
    t { '', '%% @copyright ' },
    i(2, 'Year'),
    t ' ',
    i(3, 'Apache 2.0 License'),
    t { '', '%% @doc ' },
    i(4, 'Description'),
    t { '.', '%% @end', '%% @version ' },
    i(5, 'Version'),
    t { '', '%% @end', '%%', '%% ----------------------------------' },
    t '-module(',
    f(file_name),
    t {
      ').',
      '-version("',
    },
    f(copy, 5),
    t {
      '")',
      '',
      '-export([init/2, terminate/3, websocket_init/1, websocket_handle/2,',
      '\twebsocket_info/2]).',
      '',
      'init(Req, State) ->',
      '\tcase cowboy_req:parse_header(<<"sec-websocket-protocol">>, Req0) of',
      '\t\tundefined ->',
      '\t\t\t{cowboy_websocket, Req0, State};',
      '\t\tSubprotocols ->',
      '\t\t\tcase lists:keymember(<<"',
    },
    i(6, 'my-protocol'),
    t {
      '"">, 1, Subprotocols) of',
      '\t\t\t\ttrue ->',
      '\t\t\t\t\tReq = cowboy_req:set_resp_header(<<"sec-websocket-protocol">>,',
      '\t\t\t\t\t\t<<"',
    },
    f(copy, 6),
    t {
      '">>, Req0),',
      '\t\t\t\t\t{cowboy_websocket, Req, State};',
      '\t\t\t\tfalse ->',
      '\t\t\t\t\tReq = cowboy_req:reply(400, Req0),',
      '\t\t\t\t\t{ok, Req, State}',
      '\t\t\tend',
      '\tend.',
      '\t{cowboy_websocket, Req, State, #{',
      '\t\tidle_timeout => 30000,',
      '\t\tmax_frame_size => 8000000}}.',
      '',
      'terminate(Reason, Req, State) ->',
      '\tok.',
      '',
      'websocket_init(State) ->',
      '\terlang:start_timer(1000, self(), {log, <<<"Hello!">>>}),',
      '\terlang:start_timer(3000, self(), {end}),',
      '% {[{text, <<"Init Frame">>}], State}.',
      '\t{ok, State}.',
      '',
      'websocket_handle(Frame = {text, _}, State) ->',
      '\t{[Frame], State};',
      'websocket_handle(_Frame, State) ->',
      '\t{ok, State}.',
      '',
      'websocket_info({log, Text}, State) ->',
      '\t{[{text, Text}], State};',
      'websocket_info({end}, State) ->',
      '\t{[{close, 1000, <<"done">>}], State};',
      'websocket_info(_Info, State) ->',
      '\t{ok, State}.',
      '',
      '%% Implementation',
      '',
      'implementation_methods() -> ok.',
      '',
      '-ifdef(EUNIT).',
      '',
      '-include_lib("eunit/include/eunit.hrl").',
      '',
      'sample_test() ->',
      '\t?assertEqual(true, true).',
      '',
      '-endif.',
    },
  }),

  s('cowboy_read_cookies', {
    i(1, 'Cookies'),
    t ' = cowboy_req:parse_cookies(',
    i(2, 'Req'),
    t {
      '),',
      '{_, ',
    },
    i(3, 'Val'),
    t '} = lists:keyfind(<<"',
    i(4, 'key'),
    t '">>, 1, ',
    f(copy, 1),
    t ').',
  }),

  s('cowboy_delete_cookie', {
    i(1, 'Req2'),
    t ' = cowboy_req:set_resp_cookie(<<"',
    i(2, 'cookie'),
    t '">>, 0, ',
    i(3, 'Req0'),
    t ', #{max_age => 0}).',
  }),

  s('eunit', {
    t '-module(',
    f(file_name),
    t {
      ').',
      '',
      '-include_lib("eunit/include/eunit.hrl").',
      '',
      'sample_test() -> ok = ok.',
    },
  }),
})

ls.add_snippets('c', {
  s('slice_def', {
    t 'typedef struct slice_',
    i(1, 'type'),
    t {
      ' {',
      '\t',
    },
    f(copy, 1),
    t {
      ' *head;',
      '\tsize_t len;',
    },
  }),

  s('slice_at_ensure', {
    t 'ensure(',
    i(1, 'Slice'),
    t {
      '.head != NULL);',
      'ensure(',
    },
    i(2, 'index'),
    t ' < ',
    f(copy, 1),
    t '.len && ',
    f(copy, 2),
    t {
      ' >= 0);',
      '',
    },
    i(4, 'type'),
    t ' ',
    i(3, 'outVal'),
    t ' = ',
    f(copy, 1),
    t '[',
    f(copy, 2),
    t '];',
  }),
})
